generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  username   String            @unique
  email      String            @unique
  password   String
  isAdmin    Boolean           @default(false)
  info       Info[]            @relation("UserInfo") // Remains unchanged
  avatar     String?
  createdAt  DateTime          @default(now())
  complaints Complaint[]
  parties    Party[]           @relation("PartyCreator")
  attended   PartyAttendance[]
  chats      UserChat[] // Explicit many-to-many relation
  messages   Message[]         @relation("UserMessages")
}

model Info {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  instituteId   String?
  hostel        String?
  room          Int?
  hobbies       String?
  bio           String? // Added
  contactNumber String? // Added
  linkedin      String? // Added
  github        String? // Added
  userId        String  @db.ObjectId
  user          User    @relation("UserInfo", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Complaint {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  userName    String? // New field for user name
  description String
  category    ComplaintCategory
  status      ComplaintStatus   @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Party {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  capacity    Int
  createdAt   DateTime          @default(now())
  creator     User              @relation("PartyCreator", fields: [creatorId], references: [id])
  creatorId   String            @db.ObjectId
  attendees   PartyAttendance[]
}

model PartyAttendance {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  partyId String @db.ObjectId
  party   Party  @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@unique([userId, partyId])
}

enum ComplaintCategory {
  TOILET
  WATER
  FAN
  LIGHT
  OTHER
}

enum ComplaintStatus {
  PENDING
  RESOLVED
  IN_PROGRESS
}

model Chat {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  users       UserChat[] // Explicit many-to-many relation via UserChat
  createdAt   DateTime   @default(now())
  seenBy      String[]   @db.ObjectId
  messages    Message[]
  lastMessage String?
}

model UserChat {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String   @db.ObjectId
  user      User     @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}
